#!/bin/sh
set -e

basic_regex_quote() { printf "%s" "$1" | sed 's|[\\.*^$[]|\\&|g'; }
join_on_newlines_and_quote() { sed -e :a -e '$!N;s|\n\([^./]\)|\\n\1|;ta;P;D'; }

PREFIX=""
COMPLETE_WORD=0

while [ $# -gt 0 ]; do
	case "$1" in
	-h|--help)
		echo "usage: $(basename "$0") [-h] [--file|--word] [pattern]"
		exit 0;
		;;
	--file)
		shift
		;;
	--word)
		COMPLETE_WORD=1
		shift
		;;
	*)
		PREFIX="$1"
		if [ $COMPLETE_WORD = 0 ]; then
			BASENAME=$(basename "$PREFIX")
			PREFIX=$(printf '%s' "$PREFIX" | tr -s / /)
			if [ "${PREFIX#\~}" != "$PREFIX" ]; then
				PATHNAME=$HOME${PREFIX#\~}
			else
				PATHNAME=$PREFIX
				if [ "${PATHNAME#/}" = "$PATHNAME" ]; then
					PATHNAME=./$PATHNAME
				fi
			fi
		fi
		break
		;;
	esac
done

if [ $COMPLETE_WORD = 1 ]; then
	tr -cs '[:alnum:]_' '\n' |
		grep "^$(basic_regex_quote "$PREFIX")." |
		sort -u
else
	if [ "${PATHNAME%/}" = "$PATHNAME" ]; then
		DIR=$(dirname "$PATHNAME")
	else
		DIR=${PATHNAME%/}
		BASENAME=$(printf '%s' "$BASENAME" | sed 's/^\.\{,2\}$//')
	fi
	if [ "${BASENAME#.}" = "$BASENAME" ]; then
		# Prune dot files but allow prefixes to contain ./ and ../
		find "$DIR" -maxdepth 1 -name '.[^.]*' -prune -o \( -path "$PATHNAME*" -print \)
	else
		# Complete dot files
		find "$DIR" -maxdepth 1 -path "$PATHNAME*"
	fi |
	# Handle *accidental* matches with embedded newlines:
	join_on_newlines_and_quote |
	sort |
	sed "s|$(basic_regex_quote "$(printf '%s' "$DIR"/ | tr -s / /)")||"
fi |
	vis-menu -b |
	sed "s|$(basic_regex_quote "$(basename "$PATHNAME")")||" |
	tr -d '\n'
